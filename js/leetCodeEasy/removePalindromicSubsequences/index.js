// 1332. Remove Palindromic Subsequences
// https://leetcode.com/problems/remove-palindromic-subsequences/description/

/*
You are given a string s consisting only of letters 'a' and 'b'. 
In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. 
Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:
1 <= s.length <= 1000
s[i] is either 'a' or 'b'.
*/

/*
Good explaination of the main thing to take into account
https://leetcode.com/problems/remove-palindromic-subsequences/solutions/2124240/one-major-observation-java-explanation/

TLDR: 
Since the string characters are either "a" or "b" AND a subsequence does not have to be contiguous,
The answer is either 1 or 2

It is either a palindrome or not, 
if not then remove a palindrome subsequence of all a || b and then the remainder is a palindrome

If string is a palindrome: return 1
Else return 2
*/

export function removePalindromeSub(s) {
  if (s.length < 2) {
    return s.length;
  }

  let start = 0;
  let end = s.length - 1;

  while (start < end) {
    if (s.charAt(start) !== s.charAt(end)) {
      return 2;
    }

    start++;
    end--;
  }

  return 1;
}
